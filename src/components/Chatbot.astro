---
// Chatbot component
---

<div id="chatbot-container" class="fixed bottom-4 right-4 z-50">
<!-- Burbuja de bienvenida -->
<div id="chatbot-bubble" class="absolute bottom-20 right-16 bg-white border border-gray-300 px-6 py-3 rounded-2xl shadow-lg text-base text-gray-800 flex items-center gap-3 animate-bounce max-w-md z-50" style="min-width: 260px;">
  <span id="bubble-typing"></span>
  <span class="ml-2"></span>
</div>
  <!-- Botón del chatbot -->
  <button 
    id="chatbot-toggle" 
    class="chatbot-button text-white p-2 rounded-full shadow-lg transition-all duration-300 transform hover:scale-110"
    style="background-color:transparent; width: 5.5rem; height: 5.5rem;"
  >
    <img 
      id="chatbot-icon" 
      src="/icon2023.webp" 
      alt="Asistente Virtual" 
      class="w-20 h-20 rounded-full object-cover"
    />
  </button>

  <!-- Ventana del chatbot -->
  <div 
    id="chatbot-window" 
    class="chatbot-window hidden absolute bottom-20 right-0 w-96 max-h-[90vh] h-[33rem] bg-gray-50 rounded-3xl shadow-2xl border border-gray-100/80 overflow-hidden ring-1 ring-black/10 backdrop-blur-md transition-all duration-300"
    style="box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.15);"
  >
    <!-- Header del chatbot -->
    <div class="chatbot-header p-5 text-white flex items-center justify-between rounded-t-3xl shadow-sm" style="background: linear-gradient(135deg, #34b70d 0%, #5771FE 100%); min-height: 70px;">
      <div class="flex items-center space-x-4">
        <img id="chatbot-header-icon" src="/icon2023.webp" alt="Asistente" class="w-12 h-12 rounded-full border-4 border-white shadow-md">
        <div>
          <h3 class="font-extrabold text-base tracking-wide">Asistente Virtual CMGS</h3>
          <p class="text-xs opacity-90 font-medium">En línea</p>
        </div>
      </div>
      <div class="flex items-center space-x-2">
        <!-- Botón para cambiar género -->
        <button 
          id="gender-toggle" 
          class="p-2 hover:bg-white/20 rounded-full transition-colors"
          title="Cambiar asistente"
        >
          <img id="gender-icon" src="/hombre.png" alt="Hombre" class="w-7 h-7 object-contain" />
        </button>
        <!-- Botón cerrar -->
        <button 
          id="chatbot-close" 
          class="p-2 hover:bg-white/20 rounded-full transition-colors"
        >
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Área de chat -->
    <div id="chat-area" class="flex-1 p-6 bg-gray-50">
      <!-- Vista inicial -->
      <div id="initial-view" class="text-center">
        <div class="mb-4">
          <div class="w-16 h-16 mx-auto mb-3 rounded-full flex items-center justify-center" style="background-color: rgba(52, 183, 13, 0.1);">
            <svg class="w-8 h-8" style="color: rgb(52, 183, 13);" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z" clip-rule="evenodd"></path>
            </svg>
          </div>
          <h4 class="font-bold text-military-blue mb-2">¡Hola! Soy tu asistente virtual</h4>
          <p class="text-sm text-gray-600 mb-4">¿En qué puedo ayudarte hoy?</p>
        </div>
        <div class="space-y-2 max-h-64 overflow-y-auto px-1">
          <button 
            onclick="showMayorVirtual()" 
            class="w-full p-3 text-left rounded-lg border-2 border-gray-200 hover:border-yellow-400 transition-colors group"
          >
            <div class="flex items-center space-x-3">
              <div class="w-8 h-8 rounded-full bg-yellow-100 flex items-center justify-center group-hover:bg-yellow-200">
                <svg class="w-4 h-4 text-yellow-600" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M10 2a8 8 0 100 16 8 8 0 000-16zm1 11H9v-1h2v1zm0-2H9V7h2v4z" clip-rule="evenodd"></path>
                </svg>
              </div>
              <div>
                <p class="font-medium text-gray-800">Habla con tu mayor virtual</p>
                <p class="text-xs text-gray-500">Simula una conversación con un agente virtual</p>
              </div>
            </div>
          </button>
          <button 
            onclick="showPQRForm()" 
            class="w-full p-3 text-left rounded-lg border-2 border-gray-200 hover:border-green-400 transition-colors group"
          >
            <div class="flex items-center space-x-3">
              <div class="w-8 h-8 rounded-full flex items-center justify-center group-hover:bg-green-100" style="background-color: rgba(52, 183, 13, 0.1);">
                <svg class="w-4 h-4" style="color: rgb(52, 183, 13);" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
                </svg>
              </div>
              <div>
                <p class="font-medium text-gray-800">Realizar PQR</p>
                <p class="text-xs text-gray-500">Peticiones, quejas y reclamos</p>
              </div>
            </div>
          </button>
          <button 
            onclick="showInfoMenu()" 
            class="w-full p-3 text-left rounded-lg border-2 border-gray-200 hover:border-blue-400 transition-colors group"
          >
            <div class="flex items-center space-x-3">
              <div class="w-8 h-8 rounded-full bg-blue-100 flex items-center justify-center group-hover:bg-blue-200">
                <svg class="w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                  <path d="M9 4.804A7.968 7.968 0 005.5 4c-1.255 0-2.443.29-3.5.804v10A7.969 7.969 0 015.5 14c1.669 0 3.218.51 4.5 1.385A7.962 7.962 0 0114.5 14c-1.255 0-2.443.29-3.5.804v-10A7.968 7.968 0 0014.5 4c-1.255 0-2.443.29-3.5.804V12a1 1 0 11-2 0V4.804z"></path>
                </svg>
              </div>
              <div>
                <p class="font-medium text-gray-800">Información Académica</p>
                <p class="text-xs text-gray-500">Notas, comportamiento, procesos</p>
              </div>
            </div>
          </button>
          <button 
            onclick="showAdminMenu()" 
            class="w-full p-3 text-left rounded-lg border-2 border-gray-200 hover:border-purple-400 transition-colors group"
          >
            <div class="flex items-center space-x-3">
              <div class="w-8 h-8 rounded-full bg-purple-100 flex items-center justify-center group-hover:bg-purple-200">
                <svg class="w-4 h-4 text-purple-600" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M6 6V5a3 3 0 013-3h2a3 3 0 013 3v1h2a2 2 0 012 2v3.57A22.952 22.952 0 0110 13a22.95 22.95 0 01-8-1.43V8a2 2 0 012-2h2zm2-1a1 1 0 011-1h2a1 1 0 011 1v1H8V5zm1 5a1 1 0 011-1h.01a1 1 0 110 2H10a1 1 0 01-1-1z" clip-rule="evenodd"></path>
                </svg>
              </div>
              <div>
                <p class="font-medium text-gray-800">Información Administrativa</p>
                <p class="text-xs text-gray-500">Procesos administrativos</p>
              </div>
            </div>
          </button>
        </div>
      </div>

      <!-- Chat mayor virtual -->
      <div id="mayor-virtual-chat" class="hidden flex flex-col h-full">
        <div class="flex items-center mb-4">
          <button onclick="showInitialView()" class="p-1 hover:bg-gray-200 rounded mr-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd"></path>
          </svg>
          </button>
          <h4 class="font-bold text-gray-800">Mayor Virtual</h4>
        </div>
        <div id="mayor-chat-messages" class="flex-1 overflow-y-auto bg-white border rounded p-2 mb-2 text-left text-sm"></div>
        <div class="flex items-center justify-between mb-2">
          <label class="text-xs text-gray-600">Audio respuestas:</label>
          <div class="flex items-center space-x-2">
            <button 
              id="voice-settings-btn" 
              class="p-1 hover:bg-gray-200 rounded text-xs" 
              title="Configurar voz"
            >
              ⚙️
            </button>
            <input 
              type="checkbox" 
              id="auto-speech-toggle" 
              class="rounded" 
              checked
            />
            <span class="text-xs text-gray-600">Auto</span>
          </div>
        </div>
        <form id="mayor-chat-form" class="flex gap-2" onsubmit="sendMayorMessage(event)">
          <input id="mayor-chat-input" type="text" class="flex-1 border rounded p-2 text-xs" placeholder="Escribe tu mensaje..." required />
          <button type="submit" class="bg-yellow-400 text-white px-4 py-2 rounded font-medium">Enviar</button>
        </form>
      </div>

      <!-- Formulario de documento -->
      <div id="document-form" class="hidden">
        <div class="flex items-center mb-4">
          <button onclick="showInitialView()" class="p-1 hover:bg-gray-200 rounded mr-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd"></path>
            </svg>
          </button>
          <h4 class="font-bold text-gray-800">Consulta de Estudiante</h4>
        </div>
        <form class="space-y-3" onsubmit="submitDocument(event)">
          <label class="block text-xs text-gray-700 font-medium">Tipo de documento</label>
          <select id="tipo-documento" class="w-full text-xs p-2 border rounded focus:ring-2 focus:ring-blue-400 focus:border-transparent mb-1" required>
            <option value="">Seleccione tipo de documento</option>
            <option value="cedula">Cédula</option>
            <option value="tarjeta">Tarjeta de Identidad</option>
            <option value="pep">PEP</option>
          </select>
          <input id="student-document" type="text" placeholder="Ingresa el documento del estudiante a consultar" class="w-full text-xs p-2 border rounded focus:ring-2 focus:ring-blue-400 focus:border-transparent" required>
          <button type="submit" class="w-full p-2 text-white rounded font-medium transition-colors" style="background-color: #5771FE;">
            Consultar
          </button>
        </form>
      </div>

      <!-- Formulario PQR -->
      <div id="pqr-form" class="hidden">
        <div class="flex items-center mb-4">
          <button onclick="showInitialView()" class="p-1 hover:bg-gray-200 rounded mr-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd"></path>
            </svg>
          </button>
          <h4 class="font-bold text-gray-800">Formulario PQR</h4>
        </div>
        
        <form class="space-y-3" onsubmit="submitPQR(event)">
          <div class="grid grid-cols-2 gap-2">
            <input type="text" placeholder="Nombres" id="nombres" class="text-xs p-2 border rounded focus:ring-2 focus:ring-green-400 focus:border-transparent" required>
            <input type="text" placeholder="Apellidos" id="apellidos" class="text-xs p-2 border rounded focus:ring-2 focus:ring-green-400 focus:border-transparent" required>
          </div>
          <input type="email" placeholder="Correo electrónico" id="email" class="w-full text-xs p-2 border rounded focus:ring-2 focus:ring-green-400 focus:border-transparent" required>
          <input type="tel" placeholder="Teléfono" id="telefono" class="w-full text-xs p-2 border rounded focus:ring-2 focus:ring-green-400 focus:border-transparent" required>
          <select id="tipoSolicitud" class="w-full text-xs p-2 border rounded focus:ring-2 focus:ring-green-400 focus:border-transparent" required>
            <option value="">Tipo de solicitud</option>
            <option value="peticion">Petición</option>
            <option value="queja">Queja</option>
            <option value="reclamo">Reclamo</option>
            <option value="sugerencia">Sugerencia</option>
          </select>
          <select id="area" class="w-full text-xs p-2 border rounded focus:ring-2 focus:ring-green-400 focus:border-transparent" required>
            <option value="">Área relacionada</option>
            <option value="academica">Académica</option>
            <option value="administrativa">Administrativa</option>
            <option value="disciplinaria">Disciplinaria</option>
            <option value="financiera">Financiera</option>
            <option value="servicios">Servicios Generales</option>
          </select>
          <textarea id="descripcion" placeholder="Descripción detallada de su solicitud..." class="w-full text-xs p-2 border rounded h-16 focus:ring-2 focus:ring-green-400 focus:border-transparent" required></textarea>
          <button type="submit" class="w-full p-2 text-white rounded font-medium transition-colors" style="background-color: rgb(52, 183, 13);">
            Enviar PQR
          </button>
        </form>
      </div>

      <!-- Menú de información académica -->
      <div id="info-menu" class="hidden">
        <div class="flex items-center mb-4">
          <button onclick="showInitialView()" class="p-1 hover:bg-gray-200 rounded mr-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd"></path>
            </svg>
          </button>
          <h4 class="font-bold text-gray-800">Información Académica</h4>
        </div>
        
        <div class="space-y-2">
          <button onclick="showAcademicInfo('notas')" class="w-full p-2 text-left text-sm bg-blue-50 hover:bg-blue-100 rounded border border-blue-200">
            📊 Consultar Notas
          </button>
          <button onclick="showAcademicInfo('comportamiento')" class="w-full p-2 text-left text-sm bg-blue-50 hover:bg-blue-100 rounded border border-blue-200">
            📋 Reporte de Comportamiento
          </button>
          <button onclick="showAcademicInfo('horarios')" class="w-full p-2 text-left text-sm bg-blue-50 hover:bg-blue-100 rounded border border-blue-200">
            📅 Horarios de Clase
          </button>
          <button onclick="showAcademicInfo('calendario')" class="w-full p-2 text-left text-sm bg-blue-50 hover:bg-blue-100 rounded border border-blue-200">
            📆 Calendario Académico
          </button>
        </div>
      </div>

      <!-- Menú administrativo -->
      <div id="admin-menu" class="hidden">
        <div class="flex items-center mb-4">
          <button onclick="showInitialView()" class="p-1 hover:bg-gray-200 rounded mr-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd"></path>
            </svg>
          </button>
          <h4 class="font-bold text-gray-800">Información Administrativa</h4>
        </div>
        
        <div class="space-y-2">
          <button onclick="showAdminInfo('pagos')" class="w-full p-2 text-left text-sm bg-purple-50 hover:bg-purple-100 rounded border border-purple-200">
            💳 Estado de Pagos
          </button>
          <button onclick="showAdminInfo('documentos')" class="w-full p-2 text-left text-sm bg-purple-50 hover:bg-purple-100 rounded border border-purple-200">
            📄 Solicitar Documentos
          </button>
          <button onclick="showAdminInfo('uniformes')" class="w-full p-2 text-left text-sm bg-purple-50 hover:bg-purple-100 rounded border border-purple-200">
            👔 Información de Uniformes
          </button>
          <button onclick="showAdminInfo('transporte')" class="w-full p-2 text-left text-sm bg-purple-50 hover:bg-purple-100 rounded border border-purple-200">
            🚌 Servicio de Transporte
          </button>
        </div>
      </div>

      <!-- Área de resultados -->
      <div id="result-area" class="hidden">
        <div class="flex items-center mb-4">
          <button onclick="showInitialView()" class="p-1 hover:bg-gray-200 rounded mr-2">
            <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd"></path>
          </svg>
          </button>
          <h4 class="font-bold text-gray-800" id="result-title">Información</h4>
        </div>
        <div id="result-content" class="text-sm text-gray-700"></div>
      </div>
    </div>
  </div>
</div>

<style>
  .chatbot-button {
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
  }
  
  .chatbot-window {
    animation: slideUp 0.3s ease-out;
  }
  
  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px) scale(0.9);
    }
    to {
      opacity: 1;
      transform: translateY(0) scale(1);
    }
  }
  
  /* Responsive */
  @media (max-width: 640px) {
    .chatbot-window {
      width: calc(100vw - 2rem);
      right: 1rem;
      bottom: 5rem;
    }
  }

  #chat-area {
    min-height: 16rem;
    max-height: 24rem;
    /* No overflow por defecto */
    overflow: visible;
    transition: max-height 0.2s;
  }
  #chat-area.scrollable {
    overflow-y: auto;
  }
  
  /* Estilos para controles de audio */
  .audio-controls {
    display: flex;
    gap: 2px;
  }
  
  .audio-controls button {
    min-width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
  }
  
  /* Animación para hover de los controles */
  .group:hover .audio-controls {
    opacity: 1 !important;
  }

  #chatbot-bubble {
  white-space: pre-line;
  min-width: 260px;
  max-width: 350px;
  font-size: 1rem;
  display: flex;
  align-items: center;
  gap: 8px;
}
</style>

<script>

  
declare global {
  interface Window {
    showInitialView: typeof showInitialView;
    showPQRForm: typeof showPQRForm;
    showInfoMenu: typeof showInfoMenu;
    showAdminMenu: typeof showAdminMenu;
    submitPQR: typeof submitPQR;
    showAcademicInfo: typeof showAcademicInfo;
    showAdminInfo: typeof showAdminInfo;
    showMayorVirtual: typeof showMayorVirtual;
    sendMayorMessage: typeof sendMayorMessage;
    submitDocument: typeof submitDocument;
    showAcademicInfoResult: typeof showAcademicInfoResult;
    showAdminInfoResult: typeof showAdminInfoResult;
    speakText: (text: string, messageId: string) => void;
    toggleSpeech: (messageId: string) => void;
    stopSpeech: (messageId: string) => void;
  }
}

  let currentGender = 'female'; // male o female
  
  // Text-to-Speech variables y funciones
  let currentSpeech: SpeechSynthesisUtterance | null = null;
  let speechVoice: SpeechSynthesisVoice | null = null;
  let speechRate = 1;
  let speechPitch = 1;
  let messageCounter = 0;

      
  
  // Inicializar configuración de voz
  function initSpeechSettings() {

   
    if ('speechSynthesis' in window) {
      speechSynthesis.onvoiceschanged = () => {
        const voices = speechSynthesis.getVoices();

        speechVoice = voices.find(voice => 
          (voice.lang.includes('es') || voice.name.toLowerCase().includes('spanish')) &&
          (voice.name.toLowerCase().includes('female') ||
          voice.name.toLowerCase().includes('mujer') ||
          voice.name.toLowerCase().includes('carmen') ||
          voice.name.toLowerCase().includes('soledad') ||
          voice.name.toLowerCase().includes('ines'))
        ) 
        || voices.find(voice => voice.lang.includes('es')) 
        || voices[0] 
        || null;
      };
    }
  }
  
  // Función para reproducir texto
  function speakText(text: string, messageId: string) {
    if (!('speechSynthesis' in window)) {
      alert('Tu navegador no soporta síntesis de voz');
      return;
    }
    
    // Detener cualquier reproducción anterior
    speechSynthesis.cancel();
    
    // Crear nueva utterance
    const utterance = new SpeechSynthesisUtterance(text);
    if (speechVoice) utterance.voice = speechVoice;
    utterance.rate = speechRate;
    utterance.pitch = speechPitch;
    utterance.lang = 'es-ES';
    
    // Actualizar botón durante reproducción
    const playBtn = document.getElementById(`play-${messageId}`);
    const pauseBtn = document.getElementById(`pause-${messageId}`);
    
    utterance.onstart = () => {
      currentSpeech = utterance;
      if (playBtn) playBtn.style.display = 'none';
      if (pauseBtn) pauseBtn.style.display = 'inline-block';
    };
    
    utterance.onend = () => {
      currentSpeech = null;
      if (playBtn) playBtn.style.display = 'inline-block';
      if (pauseBtn) pauseBtn.style.display = 'none';
    };
    
    utterance.onerror = () => {
      currentSpeech = null;
      if (playBtn) playBtn.style.display = 'inline-block';
      if (pauseBtn) pauseBtn.style.display = 'none';
    };
    
    speechSynthesis.speak(utterance);
  }
  
  // Función para pausar/reanudar
  function toggleSpeech(messageId: string) {
    if (speechSynthesis.speaking && !speechSynthesis.paused) {
      speechSynthesis.pause();
      const playBtn = document.getElementById(`play-${messageId}`);
      const pauseBtn = document.getElementById(`pause-${messageId}`);
      if (playBtn) playBtn.style.display = 'inline-block';
      if (pauseBtn) pauseBtn.style.display = 'none';
    } else if (speechSynthesis.paused) {
      speechSynthesis.resume();
      const playBtn = document.getElementById(`play-${messageId}`);
      const pauseBtn = document.getElementById(`pause-${messageId}`);
      if (playBtn) playBtn.style.display = 'none';
      if (pauseBtn) pauseBtn.style.display = 'inline-block';
    }
  }
  
  // Función para detener
  function stopSpeech(messageId: string) {
    speechSynthesis.cancel();
    currentSpeech = null;
    const playBtn = document.getElementById(`play-${messageId}`);
    const pauseBtn = document.getElementById(`pause-${messageId}`);
    if (playBtn) playBtn.style.display = 'inline-block';
    if (pauseBtn) pauseBtn.style.display = 'none';
  }
  
  // Toggle chatbot
  const chatbotToggle = document.getElementById('chatbot-toggle');
  if (chatbotToggle) {
    chatbotToggle.addEventListener('click', function() {
      const windowEl = document.getElementById('chatbot-window');
      if (windowEl) windowEl.classList.toggle('hidden');
    });
  }
  
  // Cerrar chatbot
  const chatbotClose = document.getElementById('chatbot-close');
  if (chatbotClose) {
    chatbotClose.addEventListener('click', function() {
      const windowEl = document.getElementById('chatbot-window');
      if (windowEl) windowEl.classList.add('hidden');
    });
  }
  
  // Cambiar género del asistente
  // Cambiar icono de género al hacer click
  document.addEventListener('DOMContentLoaded', () => {
  const genderToggle = document.getElementById('gender-toggle');
  const genderIcon = document.getElementById('gender-icon');
  const headerIcon = document.getElementById('chatbot-header-icon');
  const chatbotIcon = document.getElementById('chatbot-icon');
  let isMale = true;
  if (genderToggle && genderIcon && headerIcon && chatbotIcon) {
    genderToggle.addEventListener('click', () => {
      isMale = !isMale;
      if (isMale) {
        genderIcon.src = '/hombre.png';
        genderIcon.alt = 'Hombre';
        headerIcon.src = '/icon2023.webp';
        chatbotIcon.src = '/icon2023.webp';
      } else {
        genderIcon.src = '/mujer.png';
        genderIcon.alt = 'Mujer';
        headerIcon.src = '/icon2025.webp';
        chatbotIcon.src = '/icon2025.webp';
      }
      // Aquí puedes agregar lógica adicional para el cambio de género si es necesario
    });
  }
});
  
  // Funciones de navegación
  function showInitialView() {
    hideAllViews();
    const initialView = document.getElementById('initial-view');
    const chatArea = document.getElementById('chat-area');
    if (initialView) initialView.classList.remove('hidden');
    if (chatArea) chatArea.classList.remove('scrollable');
  }
  window.showInitialView = showInitialView;
  
  function showPQRForm() {
    hideAllViews();
    const pqrForm = document.getElementById('pqr-form');
    const chatArea = document.getElementById('chat-area');
    if (pqrForm) pqrForm.classList.remove('hidden');
    if (chatArea) chatArea.classList.remove('scrollable');
  }
  window.showPQRForm = showPQRForm;
  
  function showInfoMenu() {
    hideAllViews();
    const infoMenu = document.getElementById('info-menu');
    const chatArea = document.getElementById('chat-area');
    if (infoMenu) infoMenu.classList.remove('hidden');
    if (chatArea) chatArea.classList.remove('scrollable');
  }
  window.showInfoMenu = showInfoMenu;
  
  function showAdminMenu() {
    hideAllViews();
    const adminMenu = document.getElementById('admin-menu');
    const chatArea = document.getElementById('chat-area');
    if (adminMenu) adminMenu.classList.remove('hidden');
    if (chatArea) chatArea.classList.remove('scrollable');
  }
  window.showAdminMenu = showAdminMenu;
  
  function hideAllViews() {
    const views = ['initial-view', 'pqr-form', 'info-menu', 'admin-menu', 'result-area', 'mayor-virtual-chat', 'document-form'];
    views.forEach(id => {
      const el = document.getElementById(id);
      if (el) el.classList.add('hidden');
    });
  }
  
  // Enviar PQR
  async function submitPQR(event) {
    event.preventDefault();
    // Obtener los campos de nombre y apellido
    const form = event.target as HTMLFormElement;
    const nombreInput = form.querySelector('input[placeholder="Nombres"]') as HTMLInputElement;
    const apellidoInput = form.querySelector('input[placeholder="Apellidos"]') as HTMLInputElement;
    const telefonoInput = form.querySelector('input[placeholder="Teléfono"]') as HTMLInputElement;
    const correoInput = form.querySelector('input[placeholder="Correo electrónico"]') as HTMLInputElement;
    const nombre = nombreInput.value.trim();
    const apellido = apellidoInput.value.trim();
    const telefono = telefonoInput.value.trim();
    const correo = correoInput.value.trim();
    // Expresiones regulares
    const soloLetras = /^[A-Za-zÁÉÍÓÚáéíóúÑñ]{3,10}$/;
    const soloNumeros = /^\d{1,10}$/;
    const correoValido = /^[^@\s]+@[^@\s]+\.[^@\s]+$/;
    let errorMsg = '';
    // Validación de teléfono: solo números, máximo 10 dígitos, sin letras
    const soloNumerosEstricto = /^\d{1,10}$/;
    if (!soloLetras.test(nombre)) {
      errorMsg = 'El nombre debe tener solo letras, entre 3 y 10 caracteres.';
      nombreInput.focus();
    } else if (!soloLetras.test(apellido)) {
      errorMsg = 'El apellido debe tener solo letras, entre 3 y 10 caracteres.';
      apellidoInput.focus();
    } else if (!soloNumerosEstricto.test(telefono)) {
      errorMsg = 'El teléfono debe contener solo números (sin espacios ni letras) y máximo 10 dígitos.';
      telefonoInput.focus();
    } else if (!correoValido.test(correo)) {
      errorMsg = 'El correo debe tener un formato válido (ejemplo@dominio.com).';
      correoInput.focus();
    }
    if (errorMsg) {
      alert(errorMsg);
      return;
    }
    // Continuar con el envío del formulario
    hideAllViews();
    const resultArea = document.getElementById('result-area');
    const chatArea = document.getElementById('chat-area');
    const resultTitle = document.getElementById('result-title');
    const resultContent = document.getElementById('result-content');
    if (resultArea) resultArea.classList.remove('hidden');
    if (chatArea) chatArea.classList.add('scrollable');
    if (resultTitle) resultTitle.textContent = 'Enviando PQR...';
    if (resultContent) resultContent.innerHTML = `
      <div class="text-center p-4">
        <div class="w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-3 animate-spin">
          <svg class="w-6 h-6 text-yellow-600" fill="currentColor" viewBox="0 0 20 20">
            <circle class="opacity-25" cx="10" cy="10" r="8" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 10a6 6 0 0112 0H4z"></path>
          </svg>
        </div>
        <p class="font-medium text-yellow-800 mb-2">Enviando tu PQR...</p>
      </div>
    `;

    // Enviar correo usando EmailJS
    import('../services/emailService.client.js').then(({ sendEmail }) => {
      const templateId = 'template_pqr'; // Cambia esto por el ID real de tu plantilla en EmailJS

      return sendEmail({
        templateId,
        templateParams: {
          to_email: "pablocarvajal09@gmail.com", // Destinatario fijo
          nombres,
          apellidos,
          email,
          telefono,
          tipo_solicitud: tipoSolicitud,
          area,
          descripcion
        }
      });
    })
    .then(() => {
      if (resultTitle) resultTitle.textContent = 'PQR Enviada';
      if (resultContent) resultContent.innerHTML = `
        <div class="text-center p-4">
          <div class="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3">
            <svg class="w-6 h-6 text-green-600" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
            </svg>
          </div>
          <p class="font-medium text-green-800 mb-2">¡PQR enviada exitosamente!</p>
          <p class="text-sm text-gray-600 mb-3">Número de radicado: <strong>PQR-${Date.now()}</strong></p>
          <p class="text-xs text-gray-500">Recibirás una respuesta en un plazo máximo de 15 días hábiles al correo electrónico proporcionado.</p>
        </div>
      `;
      // Limpiar formulario
      form.reset();
    })
    .catch((err) => {
      if (resultTitle) resultTitle.textContent = 'Error al enviar PQR';
      if (resultContent) resultContent.innerHTML = `
        <div class="text-center p-4">
          <div class="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-3">
            <svg class="w-6 h-6 text-red-600" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z" clip-rule="evenodd"></path>
            </svg>
          </div>
          <p class="font-medium text-red-800 mb-2">Hubo un error al enviar tu PQR.</p>
          <p class="text-xs text-gray-500">Por favor, intenta nuevamente o contacta a soporte.</p>
        </div>
      `;
      console.error(err);
    });
  }
  window.submitPQR = submitPQR;
  
  // Mostrar información académica
  let nextInfoType: { type: string; mode: 'academic' | 'admin' } | null = null;
  function showAcademicInfo(type: string) {
    nextInfoType = { type, mode: 'academic' };
    hideAllViews();
    const documentForm = document.getElementById('document-form');
    const chatArea = document.getElementById('chat-area');
    if (documentForm) documentForm.classList.remove('hidden');
    if (chatArea) chatArea.classList.remove('scrollable');
  }
  window.showAcademicInfo = showAcademicInfo;
  
  function showAdminInfo(type: string) {
    nextInfoType = { type, mode: 'admin' };
    hideAllViews();
    const documentForm = document.getElementById('document-form');
    const chatArea = document.getElementById('chat-area');
    if (documentForm) documentForm.classList.remove('hidden');
    if (chatArea) chatArea.classList.remove('scrollable');
  }
  window.showAdminInfo = showAdminInfo;
  
  function submitDocument(event: Event) {
    event.preventDefault();
    const docInput = document.getElementById('student-document') as HTMLInputElement | null;
    const docValue = docInput ? docInput.value.trim() : '';
    if (docValue === '1095834123') {
      // Mostrar info real
      if (nextInfoType && nextInfoType.mode === 'academic') {
        showAcademicInfoResult(nextInfoType.type);
      } else if (nextInfoType && nextInfoType.mode === 'admin') {
        showAdminInfoResult(nextInfoType.type);
      }
    } else {
      // Mostrar error
      hideAllViews();
      const resultArea = document.getElementById('result-area');
      const chatArea = document.getElementById('chat-area');
      const resultTitle = document.getElementById('result-title');
      const resultContent = document.getElementById('result-content');
      if (resultArea) resultArea.classList.remove('hidden');
      if (chatArea) chatArea.classList.add('scrollable');
      if (resultTitle) resultTitle.textContent = 'Error';
      if (resultContent) resultContent.innerHTML = `<div class='text-center text-red-600 font-medium'>El usuario no se encuentra registrado en nuestra base de datos.</div>`;
    }
  }
  window.submitDocument = submitDocument;
  
  function showAcademicInfoResult(type: string) {
    const resultArea = document.getElementById('result-area');
    const chatArea = document.getElementById('chat-area');
    const resultTitle = document.getElementById('result-title');
    const resultContent = document.getElementById('result-content');
    if (resultArea) resultArea.classList.remove('hidden');
    if (chatArea) chatArea.classList.add('scrollable');
    
    const infoData = {
      notas: {
        title: 'Consulta de Notas',
        content: `
          <div class="space-y-3">
            <div class="bg-blue-50 p-3 rounded">
              <h5 class="font-medium text-blue-800">Segundo Período - 2024</h5>
              <div class="mt-2 space-y-1">
                <div class="flex justify-between text-sm">
                  <span>Matemáticas:</span>
                  <span class="font-medium text-green-600">4.2</span>
                </div>
                <div class="flex justify-between text-sm">
                  <span>Español:</span>
                  <span class="font-medium text-green-600">4.5</span>
                </div>
                <div class="flex justify-between text-sm">
                  <span>Ciencias:</span>
                  <span class="font-medium text-green-600">4.0</span>
                </div>
                <div class="flex justify-between text-sm">
                  <span>Educación Física:</span>
                  <span class="font-medium text-green-600">4.8</span>
                </div>
              </div>
              <div class="mt-2 pt-2 border-t border-blue-200">
                <div class="flex justify-between font-medium">
                  <span>Promedio:</span>
                  <span class="text-green-600">4.4</span>
                </div>
              </div>
            </div>
            <p class="text-xs text-gray-500">Para ver el detalle completo, ingresa al portal académico.</p>
          </div>
        `
      },
      comportamiento: {
        title: 'Reporte de Comportamiento',
        content: `
          <div class="space-y-3">
            <div class="bg-green-50 p-3 rounded">
              <h5 class="font-medium text-green-800">Estado Disciplinario</h5>
              <div class="mt-2">
                <div class="flex items-center space-x-2">
                  <div class="w-3 h-3 bg-green-500 rounded-full"></div>
                  <span class="text-sm">Excelente comportamiento</span>
                </div>
                <p class="text-xs text-gray-600 mt-1">Sin observaciones disciplinarias este período</p>
              </div>
            </div>
            <div class="bg-blue-50 p-3 rounded">
              <h5 class="font-medium text-blue-800">Reconocimientos</h5>
              <ul class="text-xs text-gray-700 mt-1 space-y-1">
                <li>• Puntualidad destacada</li>
                <li>• Participación en actividades</li>
                <li>• Respeto por los valores institucionales</li>
              </ul>
            </div>
          </div>
        `
      },
      horarios: {
        title: 'Horarios de Clase',
        content: `
          <div class="space-y-2">
            <div class="bg-gray-50 p-2 rounded text-xs">
              <div class="font-medium">Lunes</div>
              <div class="space-y-1 mt-1">
                <div>7:00 - 8:00 AM: Matemáticas</div>
                <div>8:00 - 9:00 AM: Español</div>
                <div>9:00 - 9:20 AM: Descanso</div>
                <div>9:20 - 10:20 AM: Ciencias</div>
                <div>10:20 - 11:20 AM: Educación Física</div>
              </div>
            </div>
            <p class="text-xs text-gray-500">Consulta el horario completo en el portal estudiantil.</p>
          </div>
        `
      },
      calendario: {
        title: 'Calendario Académico',
        content: `
          <div class="space-y-2">
            <div class="bg-yellow-50 p-2 rounded text-xs">
              <div class="font-medium text-yellow-800">Próximos Eventos</div>
              <div class="space-y-1 mt-1">
                <div>• 15 May: Entrega de notas</div>
                <div>• 20 May: Reunión de padres</div>
                <div>• 25 May: Inicio vacaciones</div>
              </div>
            </div>
            <p class="text-xs text-gray-500">Descarga el calendario completo desde el portal.</p>
          </div>
        `
      }
    };
    
    const info = infoData[type];
    if (resultTitle) resultTitle.textContent = info.title;
    if (resultContent) resultContent.innerHTML = info.content;
  }
  window.showAcademicInfoResult = showAcademicInfoResult;
  
  // Mostrar información administrativa
  function showAdminInfoResult(type: string) {
    const resultArea = document.getElementById('result-area');
    const chatArea = document.getElementById('chat-area');
    const resultTitle = document.getElementById('result-title');
    const resultContent = document.getElementById('result-content');
    if (resultArea) resultArea.classList.remove('hidden');
    if (chatArea) chatArea.classList.add('scrollable');
    
    const adminData = {
      pagos: {
        title: 'Estado de Pagos',
        content: `
          <div class="space-y-3">
            <div class="bg-green-50 p-3 rounded">
              <h5 class="font-medium text-green-800">Estado Actual</h5>
              <div class="mt-2 space-y-1">
                <div class="flex justify-between text-sm">
                  <span>Matrícula 2024:</span>
                  <span class="text-green-600 font-medium">✓ Pagado</span>
                </div>
                <div class="flex justify-between text-sm">
                  <span>Pensión Mayo:</span>
                  <span class="text-green-600 font-medium">✓ Pagado</span>
                </div>
                <div class="flex justify-between text-sm">
                  <span>Pensión Junio:</span>
                  <span class="text-red-600 font-medium">Pendiente</span>
                </div>
              </div>
            </div>
            <p class="text-xs text-gray-500">Vencimiento próximo: 5 de Junio</p>
          </div>
        `
      },
      documentos: {
        title: 'Solicitar Documentos',
        content: `
          <div class="space-y-2">
            <button class="w-full p-2 bg-blue-50 hover:bg-blue-100 rounded text-left text-xs">
              📄 Certificado de Estudios
            </button>
            <button class="w-full p-2 bg-blue-50 hover:bg-blue-100 rounded text-left text-xs">
              📄 Constancia de Matrícula
            </button>
            <button class="w-full p-2 bg-blue-50 hover:bg-blue-100 rounded text-left text-xs">
              📄 Reporte de Calificaciones
            </button>
            <button class="w-full p-2 bg-blue-50 hover:bg-blue-100 rounded text-left text-xs">
              📄 Certificado de Disciplina
            </button>
            <p class="text-xs text-gray-500 mt-2">Tiempo de entrega: 3-5 días hábiles</p>
          </div>
        `
      },
      uniformes: {
        title: 'Información de Uniformes',
        content: `
          <div class="space-y-2">
            <div class="bg-blue-50 p-2 rounded text-xs">
              <div class="font-medium">Uniforme de Diario</div>
              <div class="mt-1">Camisa blanca, pantalón gris, corbata institucional, zapatos negros</div>
            </div>
            <div class="bg-green-50 p-2 rounded text-xs">
              <div class="font-medium">Uniforme de Educación Física</div>
              <div class="mt-1">Camiseta blanca CMGS, pantaloneta azul, tenis blancos</div>
            </div>
            <p class="text-xs text-gray-500">Proveedor autorizado: Almacén El Cadete - Tel: 300 123 4567</p>
          </div>
        `
      },
      transporte: {
        title: 'Servicio de Transporte',
        content: `
          <div class="space-y-2">
            <div class="bg-yellow-50 p-2 rounded text-xs">
              <div class="font-medium">Ruta Asignada: Norte 3</div>
              <div class="mt-1">
                <div>Recogida: 6:30 AM - Barrio La Aurora</div>
                <div>Salida Colegio: 2:30 PM</div>
                <div>Monitor: Carlos Ruiz - Tel: 301 234 5678</div>
              </div>
            </div>
            <p class="text-xs text-gray-500">Para cambios de ruta comunicarse con coordinación.</p>
          </div>
        `
      }
    };
    
    const info = adminData[type];
    if (resultTitle) resultTitle.textContent = info.title;
    if (resultContent) resultContent.innerHTML = info.content;
  }
  window.showAdminInfoResult = showAdminInfoResult;
  
  // Chat mayor virtual
  function showMayorVirtual() {
    hideAllViews();
    const mayorChat = document.getElementById('mayor-virtual-chat');
    const chatArea = document.getElementById('chat-area');
    if (mayorChat) mayorChat.classList.remove('hidden');
    if (chatArea) chatArea.classList.add('scrollable');
    const messages = document.getElementById('mayor-chat-messages');
    if (messages) {
      messageCounter++;
      const welcomeMsg = '¡Hola! Soy tu mayor virtual, ¿en qué puedo ayudarte?';
      const welcomeId = `msg-${messageCounter}`;
      const cleanWelcome = welcomeMsg.replace(/'/g, "\\'");
      messages.innerHTML = `
        <div class="mb-2 text-gray-700 group" id="${welcomeId}">
          <div class="flex items-start justify-between">
            <div class="flex-1">
              <strong>Mayor Virtual:</strong> ${welcomeMsg}
            </div>
            <div class="audio-controls ml-2 opacity-0 group-hover:opacity-100 transition-opacity">
              <button 
                id="play-${welcomeId}" 
                onclick="speakText('${cleanWelcome}', '${welcomeId}')" 
                class="p-1 hover:bg-gray-200 rounded text-xs" 
                title="Reproducir audio"
              >
                🔊
              </button>
              <button 
                id="pause-${welcomeId}" 
                onclick="toggleSpeech('${welcomeId}')" 
                class="p-1 hover:bg-gray-200 rounded text-xs" 
                title="Pausar/Reanudar"
                style="display: none;"
              >
                ⏸️
              </button>
              <button 
                onclick="stopSpeech('${welcomeId}')" 
                class="p-1 hover:bg-gray-200 rounded text-xs" 
                title="Detener"
              >
                ⏹️
              </button>
            </div>
          </div>
        </div>
      `;
    }
    
    // Inicializar configuración de voz
    initSpeechSettings();
  }
  window.showMayorVirtual = showMayorVirtual;
  window.speakText = speakText;
  window.toggleSpeech = toggleSpeech;
  window.stopSpeech = stopSpeech;
  
  async function sendMayorMessage(event: Event) {
    event.preventDefault();
    const input = document.getElementById('mayor-chat-input') as HTMLInputElement | null;
    const messages = document.getElementById('mayor-chat-messages');
    if (!input || !messages) return;
    const userMsg = input.value.trim();
    if (!userMsg) return;
    messages.innerHTML += `<div class='mb-2 text-blue-700 text-right'><strong>Tú:</strong> ${userMsg}</div>`;
    input.value = '';
    // Fetch respuestas
    try {
      const res = await fetch('/mayor_virtual.json');
      const data = await res.json();

      const normalize = (str) => str
        .toLowerCase()
        .normalize("NFD").replace(/[\u0300-\u036f]/g, "")
        .replace(/[^a-z0-9üñ\s]/gi, '')
        .replace(/\s+/g, ' ')
        .trim();

      const userNorm = normalize(userMsg);
      let respuesta = '';

      // Recorre cada intención y sus patrones
      for (const intencion of data.intenciones) {
        for (const patron of intencion.patrones) {
          const patronNorm = normalize(patron);
          if (userNorm === patronNorm || userNorm.includes(patronNorm) || patronNorm.includes(userNorm)) {
            // Selecciona una respuesta aleatoria
            const respuestas = intencion.respuestas;
            respuesta = respuestas[Math.floor(Math.random() * respuestas.length)];
            break;
          }
        }
        if (respuesta) break;
      }

      if (!respuesta) respuesta = 'No tengo una respuesta para eso, intenta con otra pregunta.';
      setTimeout(() => {
        messageCounter++;
        const responseId = `msg-${messageCounter}`;
        const cleanResponse = respuesta.replace(/'/g, "\\'");
        
        // Agregar respuesta con controles de audio
        messages.innerHTML += `
          <div class='mb-2 text-gray-700 group' id="${responseId}">
            <div class="flex items-start justify-between">
              <div class="flex-1">
                <strong>Mayor Virtual:</strong> ${respuesta}
              </div>
              <div class="audio-controls ml-2 opacity-0 group-hover:opacity-100 transition-opacity">
                <button 
                  id="play-${responseId}" 
                  onclick="speakText('${cleanResponse}', '${responseId}')" 
                  class="p-1 hover:bg-gray-200 rounded text-xs" 
                  title="Reproducir audio"
                >
                  🔊
                </button>
                <button 
                  id="pause-${responseId}" 
                  onclick="toggleSpeech('${responseId}')" 
                  class="p-1 hover:bg-gray-200 rounded text-xs" 
                  title="Pausar/Reanudar"
                  style="display: none;"
                >
                  ⏸️
                </button>
                <button 
                  onclick="stopSpeech('${responseId}')" 
                  class="p-1 hover:bg-gray-200 rounded text-xs" 
                  title="Detener"
                >
                  ⏹️
                </button>
              </div>
              
            </div>
          </div>
        `;
        
        // Auto-reproducir si está habilitado
        const autoSpeechToggle = document.getElementById('auto-speech-toggle') as HTMLInputElement | null;
        if (autoSpeechToggle && autoSpeechToggle.checked) {
          setTimeout(() => speakText(respuesta, responseId), 200);
        }
        
        messages.scrollTop = messages.scrollHeight;
      }, 500);
    } catch {
      messageCounter++;
      const errorId = `msg-${messageCounter}`;
      const errorMsg = 'Error al consultar la base de respuestas.';
      messages.innerHTML += `
        <div class='mb-2 text-red-600 group' id="${errorId}">
          <div class="flex items-start justify-between">
            <div class="flex-1">
              <strong>Mayor Virtual:</strong> ${errorMsg}
            </div>
            <div class="audio-controls ml-2 opacity-0 group-hover:opacity-100 transition-opacity">
              <button 
                id="play-${errorId}" 
                onclick="speakText('${errorMsg}', '${errorId}')" 
                class="p-1 hover:bg-gray-200 rounded text-xs" 
                title="Reproducir audio"
              >
                🔊
              </button>
              <button 
                id="pause-${errorId}" 
                onclick="toggleSpeech('${errorId}')" 
                class="p-1 hover:bg-gray-200 rounded text-xs" 
                title="Pausar/Reanudar"
                style="display: none;"
              >
                ⏸️
              </button>
              <button 
                onclick="stopSpeech('${errorId}')" 
                class="p-1 hover:bg-gray-200 rounded text-xs" 
                title="Detener"
              >
                ⏹️
              </button>
            </div>
          </div>
        </div>
      `;
    }
    messages.scrollTop = messages.scrollHeight;
  }
  window.sendMayorMessage = sendMayorMessage;
  
  // Inicializar configuración de voz cuando se carga la página
  initSpeechSettings();
      document.addEventListener("DOMContentLoaded", () => {
    const bubble = document.getElementById("chatbot-bubble");
    const toggle = document.getElementById("chatbot-toggle");

    // Ocultar burbuja automáticamente después de 6 segundos
    setTimeout(() => {
      bubble?.remove();
    }, 6000);

    // También ocultarla al abrir el chatbot
    toggle?.addEventListener("click", () => {
      bubble?.remove();
    });
  });
  
  // Configuración de voz (modal/panel simple)
  setTimeout(() => {
    const voiceSettingsBtn = document.getElementById('voice-settings-btn');
    if (voiceSettingsBtn) {
      voiceSettingsBtn.addEventListener('click', function() {
        const settings = prompt(
          'Configuración de Voz:\n\n' +
          '1. Velocidad (0.5 - 2): ' + speechRate + '\n' +
          '2. Tono (0.5 - 2): ' + speechPitch + '\n\n' +
          'Ingresa nuevos valores separados por coma (velocidad,tono)\n' +
          'Ejemplo: 1.2,1.1'
        );
        
        if (settings) {
          const [rate, pitch] = settings.split(',').map(v => parseFloat(v.trim()));
          if (!isNaN(rate) && rate >= 0.5 && rate <= 2) speechRate = rate;
          if (!isNaN(pitch) && pitch >= 0.5 && pitch <= 2) speechPitch = pitch;
          alert(`Configuración actualizada:\nVelocidad: ${speechRate}\nTono: ${speechPitch}`);
        }
      });
    }
  }, 100);

  document.addEventListener("DOMContentLoaded", () => {
  const bubbleTyping = document.getElementById("bubble-typing");
  const fullText = "Si necesitas ayuda puedes hablar conmigo 😊😊";
  let i = 0;
  function typeWriter() {
    if (bubbleTyping && i < fullText.length) {
      bubbleTyping.textContent += fullText.charAt(i);
      i++;
      setTimeout(typeWriter, 40); // velocidad de escritura
    }
  }
  if (bubbleTyping) {
    bubbleTyping.textContent = "";
    typeWriter();
  }
});
</script>
